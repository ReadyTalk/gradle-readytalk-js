{"name":"gradle-readytalk-js","tagline":"Conventions for ReadyTalk JavaScript projects using Node and Grunt.","body":"gradle-readytalk-js\r\n===================\r\n\r\n[![Build Status](http://goo.gl/L6U01H)](http://goo.gl/k3KEE2)\r\n[![Coverage Status](http://goo.gl/7uC90R)](http://goo.gl/Q8wikd)\r\n[![Project Status](http://goo.gl/chOh6L)](http://goo.gl/qvTAvz)\r\n[![License](http://goo.gl/pPDj6N)](http://goo.gl/93tPwk)\r\n[![Download](http://goo.gl/OFVFVx)](http://goo.gl/wOAuo0)\r\n\r\nConventions for ReadyTalk JavaScript projects using [node.js][] and [Grunt][].\r\n\r\n[node.js]: http://nodejs.org/\r\n[Grunt]: http://gruntjs.com/\r\n\r\n## Goals ##\r\nThe main goal of this project is to establish and maintain common conventions\r\nand functionality for ReadyTalk JavaScript projects. The [gradle-readytalk-js][]\r\nplugin will wrap existing node.js-related plugins to provide:\r\n\r\n- Management of the version of the `node` and `npm` environment builds run in.\r\n- A single entry point for the CI build/test/publish process.\r\n- Conventions around the layout of ReadyTalk JavaScript projects.\r\n\r\n[gradle-readytalk-js]: http://oss.readytalk.com/gradle-readytalk-js/\r\n\r\nMost of the functionality this plugin applies is actually provided by two other\r\nplugins:\r\n\r\n- [Gradle Node Plugin](https://github.com/srs/gradle-node-plugin)\r\n- [Gradle Grunt Plugin](https://github.com/srs/gradle-grunt-plugin)\r\n\r\nThe long-term vision of this project is to merge all or most conventions and\r\nfunctionality contained here upstream and reorganize those projects into base /\r\nconvention plugins in much the same way the out-of-the-box `java-base` and\r\n`java` Gradle plugins are set up.\r\n\r\n## Usage ##\r\nReleases of this plugin are hosted on [Bintray][] and are available in Gradle\r\nvia the [jCenter][] repository. Development SNAPSHOTs for every commit and\r\nsuccessful build are published to the [OJO][] repostory.\r\n\r\n[Bintray]: https://bintray.com/readytalk/plugins/gradle-readytalk-js\r\n[jCenter]: https://bintray.com/bintray/jcenter\r\n[OJO]: https://oss.jfrog.org\r\n\r\nIf you are using Gradle 2.1 or newer, apply the plugin like this:\r\n\r\n```groovy\r\nplugins {\r\n  id 'com.readytalk.js' version '0.1.0'\r\n}\r\n```\r\n\r\nOr using the old (pre 2.1) way:\r\n\r\n```groovy\r\nbuildscript {\r\n  repositories {\r\n    jcenter()\r\n    // If you want to use a SNAPSHOT build, add the OJO repository:\r\n    maven {\r\n      name 'JFrog OSS snapshot repo'\r\n      url  'https://oss.jfrog.org/oss-snapshot-local/'\r\n    }\r\n  }\r\n  dependencies {\r\n    classpath 'com.readytalk.gradle:gradle-readytalk-js:0.1.0'\r\n  }\r\n}\r\n```\r\n\r\nInclude the plugin in your build.gradle file like this:\r\n\r\n```groovy\r\napply plugin: 'com.readytalk.js'\r\n```\r\n\r\n## Philosophy on Gradle / Grunt Interaction ##\r\nIt is strongly suggested you minimize the amount of interaction between Gradle\r\nand the other tools. For example, don't use Gradle to manage the task\r\ndependencies of the Grunt build. Instead, try to have only one or two Grunt\r\ntasks called from the Gradle build and have the Grunt build take care of itself.\r\n\r\nFuture versions of this plugin will establish some conventional tasks and task\r\ndependencies once some best-practices have been sussed out. The probable\r\ndirection will be to have a `gruntBuild` task and a `gruntIntegTest` task\r\nconfigured properly with inputs and outputs for up-to-date checks.\r\n\r\nThe `gruntBuild` task will be responsible for creating a fully-releasable\r\nproduction application distribution and running all unit tests, static analysis,\r\nand any other quality checks which:\r\n\r\n - Execute quickly (`gruntBuild` should take < 5 minutes)\r\n - Do not require the application to be deployed.\r\n - Do not rely on any external resources.\r\n\r\nThe `gruntIntegTest` task will be responsible for running any sorts of test\r\nwhich  require application deployment, external resources, or longer-running\r\ntests. The `gruntIntegTest` task should just run the tests and allow other\r\nparts of the Gradle build to bring up VMs or Docker containers or other testing\r\ninfrastructure as necessary and clean them up once the `gruntIntegTest` task\r\ncompletes execution.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}